// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.11
// source: backend/protos/organization.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrganizationService_GetOrganization_FullMethodName                   = "/OrganizationService/GetOrganization"
	OrganizationService_GetAccountsInOrganization_FullMethodName         = "/OrganizationService/GetAccountsInOrganization"
	OrganizationService_GetAccountInOrganizationBasedOnId_FullMethodName = "/OrganizationService/GetAccountInOrganizationBasedOnId"
	OrganizationService_CreateAccountInOrganization_FullMethodName       = "/OrganizationService/CreateAccountInOrganization"
	OrganizationService_InviteAccountToOrganization_FullMethodName       = "/OrganizationService/InviteAccountToOrganization"
)

// OrganizationServiceClient is the client API for OrganizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationServiceClient interface {
	GetOrganization(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Organization, error)
	GetAccountsInOrganization(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListOfAccounts, error)
	GetAccountInOrganizationBasedOnId(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*Account, error)
	CreateAccountInOrganization(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	InviteAccountToOrganization(ctx context.Context, in *InviteAccountRequest, opts ...grpc.CallOption) (*Account, error)
}

type organizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationServiceClient(cc grpc.ClientConnInterface) OrganizationServiceClient {
	return &organizationServiceClient{cc}
}

func (c *organizationServiceClient) GetOrganization(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, OrganizationService_GetOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetAccountsInOrganization(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListOfAccounts, error) {
	out := new(ListOfAccounts)
	err := c.cc.Invoke(ctx, OrganizationService_GetAccountsInOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetAccountInOrganizationBasedOnId(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, OrganizationService_GetAccountInOrganizationBasedOnId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) CreateAccountInOrganization(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, OrganizationService_CreateAccountInOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) InviteAccountToOrganization(ctx context.Context, in *InviteAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, OrganizationService_InviteAccountToOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationServiceServer is the server API for OrganizationService service.
// All implementations must embed UnimplementedOrganizationServiceServer
// for forward compatibility
type OrganizationServiceServer interface {
	GetOrganization(context.Context, *emptypb.Empty) (*Organization, error)
	GetAccountsInOrganization(context.Context, *emptypb.Empty) (*ListOfAccounts, error)
	GetAccountInOrganizationBasedOnId(context.Context, *AccountId) (*Account, error)
	CreateAccountInOrganization(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	InviteAccountToOrganization(context.Context, *InviteAccountRequest) (*Account, error)
	mustEmbedUnimplementedOrganizationServiceServer()
}

// UnimplementedOrganizationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationServiceServer struct {
}

func (UnimplementedOrganizationServiceServer) GetOrganization(context.Context, *emptypb.Empty) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) GetAccountsInOrganization(context.Context, *emptypb.Empty) (*ListOfAccounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountsInOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) GetAccountInOrganizationBasedOnId(context.Context, *AccountId) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountInOrganizationBasedOnId not implemented")
}
func (UnimplementedOrganizationServiceServer) CreateAccountInOrganization(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountInOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) InviteAccountToOrganization(context.Context, *InviteAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteAccountToOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) mustEmbedUnimplementedOrganizationServiceServer() {}

// UnsafeOrganizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationServiceServer will
// result in compilation errors.
type UnsafeOrganizationServiceServer interface {
	mustEmbedUnimplementedOrganizationServiceServer()
}

func RegisterOrganizationServiceServer(s grpc.ServiceRegistrar, srv OrganizationServiceServer) {
	s.RegisterService(&OrganizationService_ServiceDesc, srv)
}

func _OrganizationService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetOrganization(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetAccountsInOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetAccountsInOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetAccountsInOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetAccountsInOrganization(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetAccountInOrganizationBasedOnId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetAccountInOrganizationBasedOnId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetAccountInOrganizationBasedOnId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetAccountInOrganizationBasedOnId(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_CreateAccountInOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).CreateAccountInOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_CreateAccountInOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).CreateAccountInOrganization(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_InviteAccountToOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).InviteAccountToOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_InviteAccountToOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).InviteAccountToOrganization(ctx, req.(*InviteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationService_ServiceDesc is the grpc.ServiceDesc for OrganizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrganizationService",
	HandlerType: (*OrganizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrganization",
			Handler:    _OrganizationService_GetOrganization_Handler,
		},
		{
			MethodName: "GetAccountsInOrganization",
			Handler:    _OrganizationService_GetAccountsInOrganization_Handler,
		},
		{
			MethodName: "GetAccountInOrganizationBasedOnId",
			Handler:    _OrganizationService_GetAccountInOrganizationBasedOnId_Handler,
		},
		{
			MethodName: "CreateAccountInOrganization",
			Handler:    _OrganizationService_CreateAccountInOrganization_Handler,
		},
		{
			MethodName: "InviteAccountToOrganization",
			Handler:    _OrganizationService_InviteAccountToOrganization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/protos/organization.proto",
}
